import numpy as np
import random
import matplotlib.pyplot as plt
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.kernel_ridge import KernelRidge
from sklearn.metrics import mean_squared_error


lower_bound, upper_bound = -2, 2
x_values = np.linspace(lower_bound, upper_bound, 100).reshape(-1, 1)
true_function = np.exp(x_values) + x_values ** 3 - 2 * x_values
noise = np.array([random.uniform(-1, 1) for _ in range(100)]).reshape(-1, 1)
noisy_observations = true_function + noise


regression_models = {
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=100, max_depth=3),
    "Support Vector Regression": SVR(kernel='rbf', C=100, gamma=0.1),
    "Kernel Ridge Regression": KernelRidge(kernel='rbf', alpha=0.1, gamma=0.1)
}


model_results = {}
for model_name, regressor in regression_models.items():
    regressor.fit(x_values, noisy_observations.ravel())
    predictions = regressor.predict(x_values)
    error = mean_squared_error(true_function, predictions)
    model_results[model_name] = {
        "predictions": predictions,
        "MSE": error
    }


plt.figure(figsize=(18, 6))
plot_colors = {
    'observations': 'steelblue',
    'true_function': 'forestgreen',
    'predictions': 'crimson'
}

for idx, (model_name, result) in enumerate(model_results.items(), 1):
    ax = plt.subplot(1, 3, idx)


    ax.scatter(x_values, noisy_observations,
               color=plot_colors['observations'],
               s=15, alpha=0.6, label='Зашумленные данные')


    ax.plot(x_values, true_function,
            color=plot_colors['true_function'],
            linewidth=2.5, label='Истинная функция')


    ax.plot(x_values, result["predictions"],
            color=plot_colors['predictions'],
            linewidth=2, linestyle='--',
            label='Предсказание модели')


    ax.set_title(f'{model_name}\nMSE: {result["MSE"]:.4f}', pad=15)
    ax.set_xlabel('Входные значения (x)', fontsize=10)
    ax.set_ylabel('Целевые значения (y)', fontsize=10)
    ax.legend(fontsize=9)
    ax.grid(True, linestyle=':', alpha=0.7)


    ax.annotate(f'MSE = {result["MSE"]:.4f}',
                xy=(0.05, 0.85), xycoords='axes fraction',
                bbox=dict(boxstyle='round', fc='white', ec='gray', alpha=0.8))

plt.tight_layout(pad=3.0)
plt.show()

print("\nСравнение моделей регрессии:")
print("-" * 50)
for model_name, result in model_results.items():
    print(f"{model_name:25} | MSE: {result['MSE']:.6f}")
print("-" * 50)
