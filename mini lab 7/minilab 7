import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score

def prepare_classification_tasks():
    experiment_seed = 30
    samples_count = 500

    classification_tasks = [
        datasets.make_circles(n_samples=samples_count, factor=0.5, noise=0.05, random_state=experiment_seed),
        datasets.make_moons(n_samples=samples_count, noise=0.05, random_state=experiment_seed),
        datasets.make_blobs(n_samples=samples_count, cluster_std=[1.0, 0.5], random_state=experiment_seed, centers=2),
        (np.dot(datasets.make_blobs(n_samples=samples_count, random_state=170, centers=2)[0],
                [[0.6, -0.6], [-0.4, 0.8]]),
         datasets.make_blobs(n_samples=samples_count, random_state=170, centers=2)[1]),
        datasets.make_blobs(n_samples=samples_count, random_state=experiment_seed, centers=2)
    ]
    return classification_tasks

def initialize_classifiers():
    return [
        KNeighborsClassifier(n_neighbors=5),
        SVC(kernel='rbf', C=1.0, gamma='scale'),
        MLPClassifier(hidden_layer_sizes=(64, 32), activation='relu',
                     max_iter=1000, random_state=42, early_stopping=True)
    ]

def visualize_classification_performance(classifiers, tasks):
    plt.style.use('seaborn-v0_8-darkgrid')
    figure, axes_grid = plt.subplots(nrows=5, ncols=3, figsize=(16, 22))
    figure.suptitle('Сравнительный анализ алгоритмов классификации', y=1.02,
                   fontsize=18, fontweight='bold')

    task_descriptions = [
        "1. Концентрические окружности",
        "2. Полумесяцы",
        "3. Разнородные кластеры",
        "4. Анизотропно распределенные данные",
        "5. Перекрывающиеся распределения"
    ]

    algorithm_names = [
        "K-ближайших соседей",
        "Метод опорных векторов",
        "Нейронная сеть (MLP)"
    ]

    for task_idx, (features, labels) in enumerate(tasks):
        X_train, X_test, y_train, y_test = train_test_split(
            features, labels, test_size=0.2, random_state=42)

        for model_idx, classifier in enumerate(classifiers):
            current_axis = axes_grid[task_idx, model_idx]

         
            classifier.fit(X_train, y_train)
            predictions = classifier.predict(X_test)
            model_accuracy = accuracy_score(y_test, predictions)

           
            x_axis_min, x_axis_max = features[:, 0].min() - 0.5, features[:, 0].max() + 0.5
            y_axis_min, y_axis_max = features[:, 1].min() - 0.5, features[:, 1].max() + 0.5
            grid_x, grid_y = np.meshgrid(np.linspace(x_axis_min, x_axis_max, 200),
                                       np.linspace(y_axis_min, y_axis_max, 200))

            
            decision_values = classifier.predict(np.c_[grid_x.ravel(), grid_y.ravel()])
            decision_values = decision_values.reshape(grid_x.shape)

           
            current_axis.contourf(grid_x, grid_y, decision_values, alpha=0.25, cmap='viridis')
            current_axis.scatter(X_train[:, 0], X_train[:, 1], c=y_train,
                               cmap='viridis', alpha=0.8, edgecolor='w', linewidth=0.5)

            
            if task_idx == 0:
                current_axis.set_title(algorithm_names[model_idx], pad=15,
                                     fontsize=12, fontweight='semibold')
            if model_idx == 0:
                current_axis.set_ylabel(task_descriptions[task_idx],
                                      fontsize=11, labelpad=12)

           
            accuracy_text = f'Accuracy: {model_accuracy:.3f}'
            current_axis.text(0.97, 0.04, accuracy_text, transform=current_axis.transAxes,
                            ha='right', va='bottom', fontsize=10,
                            bbox=dict(facecolor='white', alpha=0.8, edgecolor='none', pad=3))

    plt.tight_layout(pad=2.5)
    plt.subplots_adjust(top=0.95)
    plt.show()


classification_tasks = prepare_classification_tasks()
classification_models = initialize_classifiers()
visualize_classification_performance(classification_models, classification_tasks)
