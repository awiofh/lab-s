import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider

np.random.seed(228)
circle_positions = [(2, 3), (7, 5), (3, 8)]
circle_sizes = [1, 1.5, 0.8]
points_per_circle = 50

coordinates_x, coordinates_y = [], []
for idx in range(3):
    angles = np.random.uniform(0, 2 * np.pi, points_per_circle)
    distances = circle_sizes[idx] + np.random.normal(0, 0.1, points_per_circle)
    circle_x = circle_positions[idx][0] + distances * np.cos(angles)
    circle_y = circle_positions[idx][1] + distances * np.sin(angles)
    coordinates_x.extend(circle_x)
    coordinates_y.extend(circle_y)

def cluster_analysis(data_x, data_y, clusters=3):
    data_points = np.array(list(zip(data_x, data_y)))
    cluster_centers = data_points[np.random.choice(len(data_points), clusters, replace=False)]
    cluster_assignments_log = []
    cluster_centers_log = [cluster_centers.copy()]

    max_iterations = 100
    convergence_threshold = 0.001

    while True:
        point_distances = np.sqrt(((data_points - cluster_centers[:, np.newaxis]) ** 2).sum(axis=2))
        current_assignments = np.argmin(point_distances, axis=0)
        cluster_assignments_log.append(current_assignments.copy())

        updated_centers = np.array([data_points[current_assignments == i].mean(axis=0) for i in range(clusters)])

        if np.all(np.abs(updated_centers - cluster_centers) < convergence_threshold):
            break

        cluster_centers = updated_centers
        cluster_centers_log.append(cluster_centers.copy())

    return cluster_assignments_log, cluster_centers_log


cluster_assignments_log, cluster_centers_log = cluster_analysis(coordinates_x, coordinates_y, clusters=3)

plt.style.use('seaborn-v0_8')
plot_figure, plot_axis = plt.subplots(figsize=(10, 7))
plt.subplots_adjust(bottom=0.2)

slider_axis = plt.axes([0.15, 0.1, 0.7, 0.03])
iteration_slider = Slider(slider_axis, 'Шаг алгоритма', 0, len(cluster_assignments_log) - 1,
                        valinit=0, valstep=1, valfmt='%0.0f',
                        color='#4C72B0', track_color='#DDDDDD')

data_plot = plot_axis.scatter(coordinates_x, coordinates_y,
                            c=cluster_assignments_log[0],
                            cmap='plasma', s=60, alpha=0.7,
                            edgecolor='white', linewidth=0.3)
centers_plot = plot_axis.scatter(cluster_centers_log[0][:, 0], cluster_centers_log[0][:, 1],
                              c='#D62728', marker='*', s=200,
                              edgecolor='black', linewidth=1,
                              label='Центры кластеров')
plot_axis.set_title('Визуализация работы K-means\nШаг 0', fontsize=12, pad=20)
plot_axis.grid(True, linestyle='--', alpha=0.6)
plot_axis.legend(loc='upper right')
plot_axis.set_xlabel('Ось X', fontsize=10)
plot_axis.set_ylabel('Ось Y', fontsize=10)

def update_visualization(step):
    current_step = int(iteration_slider.val)
    data_plot.set_array(cluster_assignments_log[current_step])
    centers_plot.set_offsets(cluster_centers_log[current_step])
    plot_axis.set_title(f'Визуализация работы K-means\nШаг {current_step}', fontsize=12, pad=20)
    plot_figure.canvas.draw_idle()

iteration_slider.on_changed(update_visualization)
plt.show()
